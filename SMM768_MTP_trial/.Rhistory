ggplot(data = theme_year,aes(x=year,y=theme_count)) +
geom_line(col="blue",size=1) +
geom_point(col="orange",size=2) +
labs(title = "Themes from 1949 to 2022", x = "Year", y = "Number of Themes") +
geom_smooth(method = "loess", size = 1, colour = "red", fill = "lightseagreen",level = 0.95) +
geom_hline(yintercept = 91, linetype="dotted", color = "red", size=1, ) +
geom_vline(xintercept = 2014, linetype="dotted", size=1) +
geom_text(aes(2014, 91, label = "(2014,91)", hjust = 1.5, vjust = 2))
theme_year<-sets %>%select(year,theme_id)%>%group_by(year)%>%summarise(theme_count=length(unique(theme_id)))
ggplot(data = theme_year,aes(x=year,y=theme_count)) +
geom_line(col="blue",size=1) +
geom_point(col="orange",size=2) +
labs(title = "Themes from 1949 to 2022", x = "Year", y = "Number of Themes") +
geom_smooth(method = "loess", size = 1, colour = "red", fill = "lightseagreen",level = 0.95) +
geom_hline(yintercept = 91, linetype="dotted", color = "red", size=1, ) +
geom_vline(xintercept = 2014, linetype="dotted", color = "red", size=1) +
geom_text(aes(2014, 91, label = "(2014,91)", hjust = 1.5, vjust = 2))
theme_year<-sets %>%select(year,theme_id)%>%group_by(year)%>%summarise(theme_count=length(unique(theme_id)))
ggplot(data = theme_year,aes(x=year,y=theme_count)) +
geom_line(col="blue",size=1) +
geom_point(col="orange",size=2) +
labs(title = "Themes from 1949 to 2022", x = "Year", y = "Number of Themes") +
geom_smooth(method = "loess", size = 1, colour = "red", fill = "lightseagreen",level = 0.95) +
geom_hline(yintercept = 91, linetype="dotted", color = "red", size=1, ) +
geom_vline(xintercept = 2014, linetype="dotted", color = "red", size=1) +
geom_text(aes(2014, 91, label = "(2014,91)",color = "red", hjust = 1.5, vjust = 2))
knit_with_parameters("~/StudyInfos/Master/DataVisualization/Test02.Rmd")
minifigs_info = merge(inventory_minifigs, inventory_parts, by.x = 'inventory_id', by.y = 'inventory_id')
spare %>% group_by(inventory_id) %>% ggplot(data = minifigs_info, mapping = aes(x = is_spare , fill = is_spare)) +
geom_bar()
labs(title = "Spare Part vs Non-Spare Part" , size = 7) +
scale_x_discrete(name="Spare Parts") +
scale_y_continuous(name="Counts") +
theme(axis.text.x = element_text(color="blue",size=8),
axis.text.y = element_text(color="blue",size=8))
#minifigs_info = merge(inventory_minifigs, inventory_parts, by.x = 'inventory_id', by.y = 'inventory_id')
spare %>% group_by(inventory_id) %>% ggplot(data = minifigs_info, mapping = aes(x = is_spare , fill = is_spare)) +
geom_bar()
labs(title = "Spare Part vs Non-Spare Part" , x = "Spare Parts", y = "Number of Parts", size = 7) +
#minifigs_info = merge(inventory_minifigs, inventory_parts, by.x = 'inventory_id', by.y = 'inventory_id')
spare %>% group_by(inventory_id) %>% ggplot(data = minifigs_info, mapping = aes(x = is_spare , fill = is_spare)) +
geom_bar()
labs(title = "Spare Part vs Non-Spare Part" , x = "Spare Parts", y = "Number of Parts", size = 7)
#minifigs_info = merge(inventory_minifigs, inventory_parts, by.x = 'inventory_id', by.y = 'inventory_id')
spare %>% group_by(inventory_id) %>% ggplot(data = minifigs_info, mapping = aes(x = is_spare , fill = is_spare)) +
geom_bar()
labs(title = "Spare Part vs Non-Spare Part" , x = "Spare Parts", y = "Number of Parts")
#minifigs_info = merge(inventory_minifigs, inventory_parts, by.x = 'inventory_id', by.y = 'inventory_id')
spare %>% group_by(inventory_id) %>% ggplot(data = minifigs_info, mapping = aes(x = is_spare , fill = is_spare)) +
geom_bar() +
labs(title = "Spare Part vs Non-Spare Part" , x = "Spare Parts", y = "Number of Parts")
inventory_info1 <- merge(inventories,inventory_minifigs,by.x="id",
by.y="inventory_id")
inventory_info2 <- merge(inventory_info1,inventory_parts,
by.x="id",by.y="inventory_id")
color_info <- merge(inventory_info2,colors,by.x="color_id",by.y="id")
filtered_info <- color_info%>% filter(color_id < 150) %>% filter(is_trans > 0)
ggplot(data=filtered_info, mapping=aes(x=name,fill=name))+
geom_bar(stat="count",position='stack')+ coord_polar("y", 0) + labs(title = "Transparent color parts of minifigs")
ggplot(data=filtered_info, mapping=aes(x=name,fill=name))+
geom_bar(stat="count",position='stack')+ coord_polar("y", 0) + labs(title = "Transparent color parts of minifigs", x = "Number of transparent color parts", y = "Name of colors")
ggplot(data=filtered_info, mapping=aes(x=name,fill=name))+
geom_bar(stat="count",position='stack')+ coord_polar("y", 0) + labs(title = "Transparent color parts of minifigs", y = "Number of transparent color parts", x = "Name of colors")
View(color_info)
View(inventory_info2)
inventory_info1 <- merge(inventories,inventory_minifigs,by.x="id",
by.y="inventory_id")
inventory_info2 <- merge(inventory_info1,inventory_parts,
by.x="id",by.y="inventory_id")
color_info <- merge(inventory_info2,colors,by.x="color_id",by.y="id")
filtered_info <- color_info%>% filter(color_id < 150) %>% filter(is_trans > 0)
ggplot(data=filtered_info, mapping=aes(x=name,fill=name))+ theme(legend.position = "none") +
geom_bar(stat="count",position='stack')+ coord_polar("y", 0) + labs(title = "Transparent color parts of minifigs", y = "Number of transparent color parts", x = "Name of colors")
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="lightgreen") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="darkred") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
legend(c(">10000", ">20000", ">30000", ">40000"))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
legend(position = c(">10000", ">20000", ">30000", ">40000"))+
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
legend.position = c(">10000", ">20000", ">30000", ">40000")+
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
theme(legend.position = c(">10000", ">20000", ">30000", ">40000")) +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
theme(legend = c(">10000", ">20000", ">30000", ">40000")) +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
theme(legend(c(">10000", ">20000", ">30000", ">40000")) ) +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
theme(legend.background = "green") +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
theme(legend.text = c(">10000", ">20000", ">30000", ">40000")) +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
theme(legend.position = "bottom") +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
theme(legend.position = "none") +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
theme(legend.title = element_blank()) +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
themes_sets <- merge(x= themes, y = sets, by.x = "id" ,by.y = "theme_id")
colnames(themes_sets)[2] = "themes_name"
colnames(themes_sets)[5] = "sets_name"
themes_sets %>%
group_by(themes_name) %>%
summarise(total_number_parts = sum(num_parts)) %>%
head(30) %>%
ggplot(aes(x = reorder(themes_name , total_number_parts) , y = total_number_parts, width = 0.5, fill = total_number_parts)) +
geom_bar(stat= "identity", color="red") + scale_y_continuous(name="Number of Parts") +
coord_flip() +
scale_x_discrete(name="Theme Names") + labs(title = "The number of parts of 30 themes") + theme_light() +
theme(axis.text.x = element_text(face="bold", color="blue",size=8),
axis.text.y = element_text(face="bold", color="blue",size=8))
inventory_info1 <- merge(inventories,inventory_minifigs,by.x="id",
by.y="inventory_id")
inventory_info2 <- merge(inventory_info1,inventory_parts,
by.x="id",by.y="inventory_id")
color_info <- merge(inventory_info2,colors,by.x="color_id",by.y="id")
filtered_info <- color_info%>% filter(color_id < 150) %>% filter(is_trans > 0)
ggplot(data=filtered_info, mapping=aes(x=name,fill=name))+
geom_bar(stat="count",position='stack')+ coord_polar("y", 0) + labs(title = "Transparent color parts of minifigs", y = "Number of transparent color parts", x = "Name of colors")
# 三角函数计算
a = seq(1,10,0.1)
sin(a) # 返回值为弧度
plot(a,sin(a),type = 'l',col = 'red')
plot(a,cos(a),col = rainbow(length(a)))
plot(a,tan(a),col = rainbow(length(a)))
plot(a,atan(a),col = rainbow(length(a)))
c = asin(1) # 反正弦函数
sinh(1)
plot(a,sinh(a),col = rainbow(length(a)))
plot(a,cosh(a),col = rainbow(length(a)))
plot(a,tanh(a),col = rainbow(length(a)))
# unique()函数 在重复的数据集中找出相异的数值 用得非常多
r = c(rep(1,4),rep(3:5,3),1:10)
unique(r) # 返回一个序列
which(r == 1) # 返回1在r中的index
k = c(17,8,45,2,1,2,16,42,4,53,12,11)
l = c(16,16,12,16,13,14,4,5,6,7,18,19)
dataf = data.frame(k,l)
dataf[which(dataf[,2] == 16),] # 找出数据框内第2列存在等于16的行index下标
dataf[which(dataf[,1] == 2),] # 找出数据框内第1列存在等于2的行index下标
dataf
getwd()
library(credit)
library(Credit)
library("Credit")
Credit?
Credit?
load("Credit")
?SLR
??SLR
??Credit
install.packages("RSiena")
library(RSiena)
R.version
# 多元方差分析
library(MASS)
attach(UScereal)
shelf = as.factor(shelf)
aggregate(cbind(calories, fat, sugars), by = list(shelf), FUN=mean)
# 因为左边三项都是因变量 所以要使用cbind组合
fit = aov(cbind(calories, fat, sugars)~shelf)
summary.aov(fit)
library(RSiena)
attach(ToothGrowth)
xtabs(~supp+dose)
aggregate(len, by=list(supp,dose), FUN=mean)
ToothGrowth$dose = as.factor(ToothGrowth$dose)
fit = aov(len~supp*dose, data = ToothGrowth)
summary(fit)
fit.lm = lm(len~supp*dose)
summary(fit.lm)
library(HH)
interaction.plot(dose, supp, len, type = "b", col
attach(litter)
library("multcomp")
attach(cholesterol)
table(trt)
aggregate(response, by=list(trt),FUN=mean)
fit = aov(response~trt, data = cholesterol)
summary(fit)
plot(fit)
# 相关性分析
state.x77 # 数据集倒入
cor(state.x77)
cov(state.x77)
x = state.x77[,c(1,2,3,6)]
y = state.x77[,c(4,5)]
cor(x,y)
# 偏相关系数-在控制一个变量时 剩余多个变量之间的关系
library(ggm)
colnames(state.x77)
# Population, Income, Illiteracy, Life Exp, Murder, HS Grad, Frost,Area
ptest = pcor(c(1,5,2,3,6), cov(state.x77))
ptest
# 相关性检验 如果为0，则表示两个变量不为线性关系，
# 有可能两者不相关，但也有可能两者有更加复杂的关系。
?cor.test
# 检验文盲率与谋杀率之间的相关性
cor.test(state.x77[,3], state.x77[,5]) # p-v=1.258e-08 拒绝Ho 接受H1:correlation is not equal to 0
# cor.test函数只能对一组函数进行处理 corr.test可以对多个函数进行处理 包为 psych
library(psych)
corr.test(state.x77)
?pcor.test
pcor.test(ptest, 3, 50) # 3个需要控制的变量数
install.packages(psych)
install.packages("psych")
install.packages("mnormt")
x = (71, 75, 79, 71, 70, 73, 72)
?t.test
x = c(71, 75, 79, 71, 70, 73, 72)
y = c(70, 68, 72, 73, 67)
t.test(x ,y , alternative = c("two.sided", "less", "greater"), mu=0)
t.test(x ,y , alternative = c("one.sided", "less", "greater"), mu=0)
t.test(x ,y , mu=0)
t.test(x ,y , alternative = "greater", mu=0)
x = c(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06)
y = c(9.340, 9.369, 9.398, 9.427, 9.468, 9.505, 9.550)
summary(lm(y~x))
plot(x,y)
# Calculate means and standard deviations for the two samples
mean1 <- mean(x)
mean2 <- mean(y)
sd1 <- sd(x)
sd2 <- sd(y)
# Calculate t-statistic
t <- (mean1 - mean2) / (sd1 / sqrt(length(x)) + sd2 / sqrt(length(y)))
# Calculate degrees of freedom
df <- length(x) + length(y) - 2
# Calculate p-value
p <- 2 * pt(abs(t), df)
# Print results
print(p)vv
# Calculate means and standard deviations for the two samples
mean1 <- mean(x)
mean2 <- mean(y)
sd1 <- sd(x)
sd2 <- sd(y)
# Calculate t-statistic
t <- (mean1 - mean2) / (sd1 / sqrt(length(x)) + sd2 / sqrt(length(y)))
# Calculate degrees of freedom
df <- length(x) + length(y) - 2
# Calculate p-value
p <- 2 * pt(abs(t), df)
# Print results
print(p)
# Calculate means and standard deviations for the two samples
mean1 <- mean(x)
mean2 <- mean(y)
sd1 <- sd(x)
sd2 <- sd(y)
# Calculate t-statistic
t <- (mean1 - mean2) / (sd1 / sqrt(length(x)) + sd2 / sqrt(length(y)))
# Calculate degrees of freedom
df <- length(x) + length(y) - 2
# Calculate p-value
p <- 2 * pt(abs(t), df)
# Print results
print(p)
t.test(x ,y , alternative = "greater", mu=0)
x = c(71, 75, 79, 71, 70, 73, 72)
y = c(70, 68, 72, 73, 67)
# Calculate means and standard deviations for the two samples
mean1 <- mean(x)
mean2 <- mean(y)
sd1 <- sd(x)
sd2 <- sd(y)
# Calculate t-statistic
t <- (mean1 - mean2) / (sd1 / sqrt(length(x)) + sd2 / sqrt(length(y)))
# Calculate degrees of freedom
df <- length(x) + length(y) - 2
# Calculate p-value
p <- 2 * pt(abs(t), df)
# Print results
print(p)
t.test(x ,y , alternative = "greater", mu=0)
# Calculate means for the two samples
mean1 <- mean(x)
mean2 <- mean(y)
# Perform t-test using the var.test() function in R
t <- var.test(x, y)
# Extract p-value from t-test results
p <- t$p.value
# Print results
print(p)
summary(lm(y~x))
x = c(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06)
y = c(9.340, 9.369, 9.398, 9.427, 9.468, 9.505, 9.550)
summary(lm(y~x))
summary(lm(y~x, col("green")))
abline(lm(y ~ x))
plot(x,y, colors('green'))
plot(x,y, col('green'))
plot(x,y, col="blue")
plot(x,y, col="green")
abline(lm(y ~ x))
summary(lm(y~x))
shiny::runApp('StudyInfos/Master/Bayes/Term2/SMM636 Machine Learning/Group 2')
setwd("~/StudyInfos/Master/Bayes/Term2/SMM768 Applied Deep Learning /SMM768_MTP")
df = read.csv("insurance_scaled_new.csv")
attach(df)
model = glm(Fraud~., family = binomial(link = "logit"), data = df)
summary(model)
df = read.csv("insurance_trial_20cols.csv")
attach(df)
model = glm(Fraud~., family = binomial(link = "logit"), data = df)
summary(model)
View(df)
model = glm(Fraud~. - ClaimInvolvedCovers, family = binomial(link = "logit"), data = df)
summary(model)
model = glm(Fraud~. - ClaimInvolvedCovers - DamageImportance, family = binomial(link = "logit"), data = df)
summary(model)
model = glm(Fraud~. - ClaimInvolvedCovers - DamageImportance - NumberOfBodilyInjuries, family = binomial(link = "logit"), data = df)
summary(model)
model = glm(Fraud~. - ClaimInvolvedCovers - DamageImportance - NumberOfBodilyInjuries - PolicyWasSubscribedOnInternet, family = binomial(link = "logit"), data = df)
summary(model)
model = glm(Fraud~. - ClaimInvolvedCovers - DamageImportance - NumberOfBodilyInjuries - PolicyWasSubscribedOnInternet - FirstPartyVehicleType, family = binomial(link = "logit"), data = df)
summary(model)
model = glm(Fraud~. - ClaimInvolvedCovers - DamageImportance - NumberOfBodilyInjuries - PolicyWasSubscribedOnInternet - FirstPartyVehicleType - PolicyholderOccupation, family = binomial(link = "logit"), data = df)
summary(model)
model = glm(Fraud~. - ClaimInvolvedCovers - DamageImportance - NumberOfBodilyInjuries - PolicyWasSubscribedOnInternet - FirstPartyVehicleType - PolicyholderOccupation - FirstPartyVehicleNumber, family = binomial(link = "logit"), data = df)
summary(model)
